import pandas as pd
from dateutil import tz
from datetime import datetime as dt

#CONSTANTS
src = 'GCS_M001_ACC_left_20160604182603.csv'#name of the file to be processed, update it with the full file path
dest = 'transformed.csv' #name of output csv file generated by code
tz = 'America/New_York'#time zone of the data


def convert_E4_files_to_geneactiv_format():
    """
     Generates the files that can be processed by SleepPy package.

     The function reads the accelerometer CSV files generated by Empatica E4 sensor. Then it converts them to a format similar to that generated by the
     GeneActiv device, which can be processed by the SleepPy package.

     Parameters:
         The function does not take any arguments but you need to update the global constants src, tz. Src is the path/name of the
         file which needs to be processed. Dest is the name of the ouput csv file. Tz is the time-zone in which the data was collected. Please note that this initial draft of the code currently ends up ignoring time zone.

     Returns:
         The function does not return any value but saves the values to csv file.

     """
    csv_stream_from_file_acc = pd.read_csv(src, header=None, names=['x', 'y', 'z'])
    frequency = csv_stream_from_file_acc.ix[1, 'x']
    csv_initial_timestamp = dt.utcfromtimestamp(csv_stream_from_file_acc.ix[0, 'x'])  # converts POSIX to UTC time as datetime object
    csv_initial_timestamp = csv_initial_timestamp.replace(tzinfo=tz.gettz('UTC'))
    csv_initial_timestamp = csv_initial_timestamp.astimezone(tz.gettz(tz))
    csv_stream_from_file_acc = csv_stream_from_file_acc.drop(csv_stream_from_file_acc.index[:2])
    csv_initial_timestamp = csv_initial_timestamp.replace(tzinfo=None)  # temporarily ignoring time zone just to see if can feed into code, change later
    csv_initial_timestamp = dt.strptime(csv_initial_timestamp.strftime('%Y-%m-%d %H:%M:%S') + ':000000',
                                        '%Y-%m-%d %H:%M:%S:%f')  # turning into proper formatting with colon instead of decimal point
    index_acc = pd.date_range(start=csv_initial_timestamp, periods=len(csv_stream_from_file_acc.index),
                              freq='31250U')  # getting timestamps (index col)
    new_indices = []  # will hold proper timestamps with proper formatting, reformatted below
    for el in index_acc:
        new_indices.append(el.strftime('%Y-%m-%d %H:%M:%S:%f'))
    # swapping in properly-formatted timestamps as index col
    csv_stream_from_file_acc.insert(loc=0, column='Time', value=new_indices)
    csv_stream_from_file_acc.set_index('Time', inplace=True)
    # adding in fake Lux, button ,and temp, all zeroes, so columns match up with GeneActiv
    # Note: when running SleepPy, need to change temperature_threshold to <0 (ex: -1) so the zero values we set are above the threshold so we don't discount anything for low temp
    zeros = [0 for i in range(len(new_indices))]
    csv_stream_from_file_acc.insert(loc=3, column='LUX', value=zeros)
    csv_stream_from_file_acc.insert(loc=4, column='Button', value=zeros)
    csv_stream_from_file_acc.insert(loc=5, column='T', value=zeros)  # temp
    # dividing x and y by 64 to convert to Gs (*2/128 as Empatica recommends, Empatica E4 records in units of 1/64 Gs)
    for col in ['x', 'y', 'z']:
        csv_stream_from_file_acc[col] = csv_stream_from_file_acc[col] * 2 / 128
    csv_stream_from_file_acc.to_csv(dest)

def main():
    convert_E4_files_to_geneactiv_format()

if __name__ == "__main__":
    main()
